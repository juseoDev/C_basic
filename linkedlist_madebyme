#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct linkedlist{
	int n;
	struct linkedlist* next;
}NODE;

typedef NODE* LINK;

LINK head = NULL;

LINK createNode(int num) {
	LINK newNode = (LINK)malloc(sizeof(NODE));
	newNode->n = num;
	newNode->next = NULL;
	return newNode;
}

LINK addlastNode(LINK head, LINK newNode) {
	LINK cur = head;
	if (head == NULL) {
		head = newNode;
	}
	else {
		while (cur->next != NULL) {
			cur = cur->next;
		}
		cur->next = newNode;
	}
	return head;
}
LINK addmiddleNode(LINK head, LINK newNode, int n) {
	LINK cur = head;
	for (int i = 1; i < n-1; i++) {
		if (cur == NULL) {
			break;
		}
		cur = cur->next;
	}
	newNode->next = cur->next;
	cur->next = newNode;
	return head;
}

LINK deleteNode(LINK head, int n) {
	LINK cur;
	LINK precur = head;
	if (n == 1) {
		head = head->next;
		return head;
	}
	for (int i = 1; i < n - 1; i++) {
		if (precur == NULL) {
			break;
		}
		precur = precur->next;
	}
	cur = precur->next;
	precur->next = cur->next;
	free(cur);
	return head;
}
void printList(LINK head) {
	LINK cur = head;
	while (cur != NULL) {
		printf("%d\n", cur->n);
		cur = cur->next;
	}
}
int main(void) {
	int k;
	LINK anode = createNode(1);
	LINK bnode = createNode(2);
	LINK cnode = createNode(3);
	LINK dnode = createNode(4);
	LINK enode = createNode(5);
	LINK fnode = createNode(6);


	head = addlastNode(head, anode);
	head = addlastNode(head, bnode);
	head = addlastNode(head, cnode);
	head = addlastNode(head, dnode);
	head = addlastNode(head, enode);

	head = addmiddleNode(head, fnode, 2);
	printList(head);
	printf("\n\n");
	scanf("%d", &k);

	printf("\n\n");

	head = deleteNode(head, k);

	

	printList(head);
	return 0;
}
